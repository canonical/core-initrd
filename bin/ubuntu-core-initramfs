#!/usr/bin/python3
import argparse
import os
from subprocess import run, check_call, check_output
import tempfile
import pathlib
import platform
import glob
import shutil
import re
import sys
from collections import namedtuple
from enum import Enum, auto


class ModTable:

    def __init__(self):
        self._table = {}

    def get(self, key, default=None):
        if not isinstance(key, str):
            raise TypeError
        return self._table.get(key.replace('_', '-'), default)

    def __contains__(self, key):
        return key.replace('_', '-') in self._table

    def __getitem__(self, key):
        if not isinstance(key, str):
            raise TypeError
        return self._table[key.replace('_', '-')]

    def __setitem__(self, key, value):
        if not isinstance(key, str):
            raise TypeError
        self._table[key.replace('_', '-')] = value


class ModuleDb:

    ModuleInfo = namedtuple('ModuleInfo', ('builtin', 'aliases', 'symbols'))
    alias_line = re.compile(r"^alias +(?P<alias>[^ ]+) +(?P<target>[^ ]+)$")
    modinfo_line = re.compile("^(?P<name>[^.]+)[.](?P<arg>[^.]+)=(?P<value>.+)$")
    class Installed(Enum):
        EXPLICIT = auto()
        IMPLICIT = auto()

    @staticmethod
    def __each_alias(path):
        with open(path, "r") as f:
            data = f.read()
        for line in data.splitlines():
            m = ModuleDb.alias_line.fullmatch(line)
            if m:
                yield m['alias'], m['target']

    def __init__(self, module_path):
        self._modules = ModTable()
        self._alias = ModTable()
        self._deps = ModTable()
        self._installed = ModTable()
        not_found = set()

        with open(os.path.join(module_path, "modules.builtin"), "r") as f:
            for line in f.read().splitlines():
                name = os.path.splitext(os.path.basename(line))[0]
                self._modules[name] = ModuleDb.ModuleInfo(True, [], [])

        with open(os.path.join(module_path, "modules.builtin.modinfo"), "r") as f:
            for line in f.read().split('\0'):
                m = ModuleDb.modinfo_line.fullmatch(line)
                if m:
                    if m['arg'] == 'alias':
                        original = self._modules.get(m['name'], ModuleDb.ModuleInfo(True, [], []))
                        self._modules[m['name']] = ModuleDb.ModuleInfo(original.builtin,
                                                                    original.aliases + [m['value']],
                                                                    original.symbols)
                    self._alias[m['value']] = m['name']

        for root, dirs, files in os.walk(module_path):
            for f in files:
                if f.endswith('.ko'):
                    name, _ = os.path.splitext(f)
                elif '.ko.' in f:
                    name, _ = f.split('.ko.', maxsplit=1)
                else:
                    continue
                self._modules[name] = ModuleDb.ModuleInfo(False, [], [])

        for alias, target in ModuleDb.__each_alias(os.path.join(module_path, "modules.alias")):
            try:
                original = self._modules[target]
            except KeyError:
                if target not in not_found:
                    print(f"module.alias: cannot find module {target}", file=sys.stderr)
                    not_found.add(target)
            else:
                self._modules[target] = ModuleDb.ModuleInfo(original.builtin,
                                                            original.aliases + [alias],
                                                            original.symbols)
                self._alias[alias] = target

        for alias, target in ModuleDb.__each_alias(os.path.join(module_path, "modules.symbols")):
            try:
                original = self._modules[target]
            except KeyError:
                if target not in not_found:
                    print(f"modules.symbols: cannot find module {target}", file=sys.stderr)
                    not_found.add(target)
            else:
                self._modules[target] = ModuleDb.ModuleInfo(original.builtin,
                                                            original.aliases,
                                                            original.symbols + [alias])

        with open(os.path.join(module_path, "modules.dep"), "r") as f:
            for line in f.read().splitlines():
                mod, deps = line.split(':', 1)
                deps = deps.strip()
                mod = os.path.basename(mod)
                mod = os.path.splitext(mod)[0]
                if len(deps) != 0:
                    for dep in deps.split():
                        dep = os.path.basename(dep)
                        dep = os.path.splitext(dep)[0]
                        if mod not in self._deps:
                            self._deps[mod] = []
                        self._deps[mod].append(dep)

    def mark_installed(self, mod, source):
        real_mod = self.solve_alias(mod)
        if real_mod is None:
            print(f"WARNING: Module {mod} is not known in {source}", file=sys.stderr)
            return
        if real_mod in self._installed:
            old_mode, old_origin, old_source = self._installed[real_mod]
            if old_mode == ModuleDb.Installed.IMPLICIT:
                print(f"WARNING: Module {mod} installed by {source}, but is dependency of {old_origin} installed by {old_source}", file=sys.stderr)
            elif old_mode == ModuleDb.Installed.EXPLICIT:
                print(f"WARNING: Module {mod} installed by {source}, but it was already installed by {old_source} - you could remove it from one of the sources", file=sys.stderr)
                return
            else:
                print(f"INTERNAL ERROR: unexpected value in ModuleDb: {ModuleDb}",
                      file=sys.stderr)
                exit(1)
        self._installed[mod] = (ModuleDb.Installed.EXPLICIT, mod, source)
        for dep in self.all_deps(real_mod):
            if dep in self._installed:
                dep_mode, dep_origin, dep_source = self._installed[dep]
                if dep_mode == ModuleDb.Installed.EXPLICIT:
                    print(f"WARNING: Module {dep} installed by {dep_source}, but is dependency of {mod} installed by {source}", file=sys.stderr)
            else:
                self._installed[dep] = (ModuleDb.Installed.IMPLICIT, mod, source)

    def all_deps(self, mod):
        real_mod = self.solve_alias(mod)
        if real_mod is None:
            return
        queue = self._deps.get(real_mod, [])
        done = set()
        while queue:
            m = queue.pop().replace('_', '-')
            if m in done:
                continue
            yield m
            done.add(m)
            if m in self._deps:
                queue.extend(self._deps[m])

    def solve_alias(self, name):
        if name in self._modules:
            return name
        if name in self._alias:
            return self.solve_alias(self._alias[name])
        return None

    def __contains__(self, name):
        if name in self._modules:
            return True
        if name not in self._alias:
            return False
        return self._alias[name] in self

    def __getitem__(self, name):
        if not isinstance(name, str):
            raise TypeError
        if name in self._modules:
            return self._modules[name]
        if name in self._alias:
            return self[self._alias[name]]
        raise KeyError


# os.path.join() throws away previous components when it finds one
# that is an absolute path - we do not want that when using --root as
# many defaults are absolute, so we use this function to make second
# and later paths relative.
def path_join_make_rel_paths(path, *paths):
    relative_paths = []
    for p in paths:
        relative_paths.append(os.path.relpath(os.path.join('/', p), '/'))
    return os.path.join(path, *relative_paths)


known_automatic_modules = list(map(re.compile, [
    r'crypto-.*',
    r'algif-.*',
    r'fs-.*',
    r'nls-.*',
    r'dm-.*',
    r'md-.*',
]))

# Include kernel modules specified in conf_file
def add_modules_from_file(dest_d, kernel_root, modules_d, fw_d, conf_file, db,
                          warn_discoverable=False):
    """Include kernel modules specified in `conf_file`

    Args:
        dest_d (str): Path to sysroot
        kernel_root (str): Path to kernel directory
        modules_d (str): Path to module directory
        fw_d (str): Path to firmware directory
        conf_file (str): Path to configuration file
        db (ModuleDb): A ModuleDb instance which contains information about modules from `modules_d`
        warn_discoverable (bool): Whether to warn of modules that can be discovered through aliases

    """

    with open(conf_file) as f:
        for module in f.readlines():
            module = module.strip()
            if module:
                if module[0] in ["#", ";"]:
                    continue

                try:
                    mod = db[module]
                except KeyError:
                    print(f"NOTE: {conf_file}: Module {module} not found", file=sys.stderr)
                    if warn_discoverable and any(r.fullmatch(module.replace('_', '-')) for r in known_automatic_modules):
                        print(f"WARNING: {conf_file}: Module {module} is probably automatically loaded", file=sys.stderr)
                else:
                    if mod.builtin:
                        print(f"NOTE: {conf_file}: Module {module} is builtin", file=sys.stderr)
                    if warn_discoverable:
                        if len(mod.aliases) > 0:
                              print(f"WARNING: {conf_file}: Module {module} has aliases:", file=sys.stderr)
                              for alias in mod.aliases:
                                  print(f" * {alias}", file=sys.stderr)
                        elif warn_discoverable and any(r.fullmatch(module.replace('_', '-')) for r in known_automatic_modules):
                              print(f"WARNING: {conf_file}: Module {module} is probably automatically loaded", file=sys.stderr)

                    # A module that has symbols but no alias is likely to be loaded through aliases
                    if len(mod.aliases) == 0 and len(mod.symbols) > 0:
                        print(f"WARNING: {conf_file}: Module {module} exports symbols:", file=sys.stderr)
                        for symbol in mod.symbols:
                            print(f" * {symbol}", file=sys.stderr)
                    if not mod.builtin:
                        db.mark_installed(module, conf_file)

                check_call(
                    [
                        "/usr/lib/dracut/dracut-install",
                        "-D",
                        dest_d,
                        "-r", kernel_root,
                        "--kerneldir",
                        modules_d,
                        "--firmwaredirs",
                        fw_d,
                        "--module",
                        "--optional",
                        module,
                    ]
                )


def install_files(files, dest_dir):
    proc_env = os.environ.copy()
    proc_env["LD_PRELOAD"] = ""
    check_call(
        [
            "/usr/lib/dracut/dracut-install",
            "-D", dest_dir,
            "--ldd", "--all",
        ] + files,
        env=proc_env)


# This is useful if the destination path inside dest_dir is different
# from the current file path.
def install_file_to_path(file, dest_dir, dest_path):
    proc_env = os.environ.copy()
    proc_env["LD_PRELOAD"] = ""
    check_call(
        [
            "/usr/lib/dracut/dracut-install",
            "-D", dest_dir,
            "--ldd", file, dest_path,
        ],
        env=proc_env)


# Returns as a list the files contained in a list of deb packages.
def package_files(pkgs):
    out = check_output(["dpkg", "-L"] + pkgs)
    return out.decode("utf-8").splitlines()


def install_systemd_files(dest_dir):
    # Build list of files and directories

    lines = package_files(["systemd", "systemd-sysv"])
    # From systemd, we pull
    # * units configuration
    # * Executables
    # * Module load options
    # * Configuration of kernel parameters
    # * udev rules
    # * Configuration for systemd-tmpfiles
    # TODO: some of this can be cleaned up
    to_include = re.compile(r"^/lib/systemd/system|"
                            r".*/modprobe\.d/|"
                            r".*/sysctl\.d/|"
                            r".*/rules\.d/|"
                            r".*/tmpfiles\.d/|"
                            r".*bin/|"
                            r".*sbin/"
                            )
    files = [i for i in lines if to_include.match(i)]

    lines = package_files(["udev"])
    # From udev, we pull
    # * Executables
    # * systemd configuration (units, tmpfiles)
    # * udev rules
    # * hwdb
    # TODO: some of this can be cleaned up
    to_include = re.compile(r".*bin/|"
                            r".*lib/|"
                            r".*rules\.d/"
                            )
    files += [i for i in lines if to_include.match(i)]

    files.append("/var/lib/systemd/")

    # Filter out some units we don't want
    to_remove = re.compile(".*systemd-gpt-auto-generator|"
                           ".*proc-sys-fs-binfmt_misc.automount|"
                           ".*systemd-pcrphase.*")
    filtered = [i for i in files if not to_remove.match(i)]
    # Install
    install_files(filtered, dest_dir)

    # Local modifications
    # This hack should be removed with PR#113
    check_call([r"sed -i '/^After=/"
                r"{;s, *plymouth-start[.]service *, ,;/"
                r"^After= *$/d;}' "
                + os.path.join(dest_dir,
                               "usr/lib/systemd/system/systemd-ask-password-*")],
               shell=True)
    # Generate hw database (/usr/lib/udev/hwdb.bin) for udev and
    # remove redundant definitions after that.
    check_call(["systemd-hwdb", "--root", dest_dir,
                "update", "--usr", "--strict"])
    shutil.rmtree(os.path.join(dest_dir, "usr/lib/udev/hwdb.d"))


def install_busybox(dest_dir):
    install_file_to_path("/usr/lib/initramfs-tools/bin/busybox", dest_dir,
                         "usr/bin/busybox")
    # Create links to commands
    bb_cmd = os.path.join(dest_dir, "usr/bin/busybox")
    out = check_output([bb_cmd, "--list-long"])
    cmds = out.decode("utf-8").splitlines()
    # Remove commands we do not want
    to_remove = ["busybox", "reboot", "mount", "umount", "modinfo"]
    cmds = [c for c in cmds if c not in to_remove]
    for c in cmds:
        os.symlink("busybox", os.path.join(dest_dir, "usr/bin", c))


def install_misc(dest_dir):
    # dmsetup rules
    rules = package_files(["dmsetup"])
    to_include = re.compile(r".*rules.d/")
    rules = [i for i in rules if to_include.match(i)]
    install_files(rules, dest_dir)

    # Other needed stuff
    out = check_output(["dpkg-architecture", "-q",
                        "DEB_HOST_MULTIARCH"]).decode("utf-8")
    deb_arch = out.splitlines()[0]
    files = [
        "/usr/bin/kmod",
        "/usr/bin/mount",
        "/usr/sbin/sulogin",
        "/usr/bin/tar",
        "/usr/lib/" + deb_arch + "/libgcc_s.so.1",
        "/usr/lib/systemd/system/dbus.service",
        "/usr/lib/systemd/system/dbus.socket",
        "/usr/lib/systemd/system/plymouth-start.service",
        "/usr/lib/systemd/system/plymouth-switch-root.service",
        "/usr/lib/systemd/systemd-bootchart",
        "/usr/sbin/cryptsetup",
        "/usr/sbin/dmsetup",
        "/usr/sbin/e2fsck",
        "/usr/sbin/fsck",
        "/usr/bin/umount",
        "/usr/sbin/fsck.vfat",
        "/usr/sbin/fsck.vfat",
        "/usr/sbin/mkfs.ext4",
        "/usr/sbin/mkfs.vfat",
        "/usr/sbin/sfdisk",
        "/usr/bin/dbus-daemon",
        "/usr/bin/mountpoint",
        "/usr/bin/partx",
        "/usr/bin/plymouth",
        "/usr/bin/unsquashfs",
        "/usr/lib/" + deb_arch + "/plymouth/label-freetype.so",
        "/usr/lib/" + deb_arch + "/plymouth/script.so",
        "/usr/lib/" + deb_arch + "/plymouth/two-step.so",
        "/usr/sbin/depmod",
        "/usr/sbin/insmod",
        "/usr/sbin/lsmod",
        "/usr/sbin/modinfo",
        "/usr/sbin/modprobe",
        "/usr/sbin/plymouthd",
        "/usr/sbin/rmmod",
        "/usr/share/dbus-1/system.conf",
        "/usr/share/libdrm/amdgpu.ids",
    ]
    files += glob.glob("/lib/" + deb_arch + "/libnss_compat.so.*")
    files += glob.glob("/lib/" + deb_arch + "/libnss_files.so.*")
    files += glob.glob("/usr/lib/" + deb_arch + "/plymouth/renderers/*.so")
    files += glob.glob("/usr/share/plymouth/themes/bgrt/*")
    files += glob.glob("/usr/share/plymouth/themes/spinner/*")
    install_files(files, dest_dir)
    # Links for fsck
    os.symlink("e2fsck", os.path.join(dest_dir, "usr/sbin", "fsck.ext4"))
    # Get deps for shared objects that have not the exec bit set and that
    # are loaded with dlopen (which means that they are not pull by --ldd
    # option, instead use --resolvelazy).
    proc_env = os.environ.copy()
    proc_env["LD_PRELOAD"] = ""
    to_resolve = [
        "/usr/lib/" + deb_arch + "/plymouth/label-freetype.so",
        "/usr/lib/" + deb_arch + "/plymouth/script.so",
        "/usr/lib/" + deb_arch + "/plymouth/two-step.so",
    ]
    to_resolve += glob.glob("/usr/lib/" + deb_arch + "/plymouth/renderers/*.so")
    check_call(
        [
            "/usr/lib/dracut/dracut-install",
            "-D", dest_dir,
            "--resolvelazy",
        ] + to_resolve,
        env=proc_env)
    # Build ld cache
    check_call(["ldconfig", "-r", dest_dir])


def create_initrd(parser, args):
    # TODO generate microcode instead of shipping in debian package
    rootfs = "/"
    if not args.kerneldir:
        args.kerneldir = "/lib/modules/%s" % args.kernelver
    if args.root:
        args.skeleton = path_join_make_rel_paths(args.root, args.skeleton)
        args.kerneldir = path_join_make_rel_paths(args.root, args.kerneldir)
        args.firmwaredir = path_join_make_rel_paths(args.root, args.firmwaredir)
        args.output = path_join_make_rel_paths(args.root, args.output)
        rootfs = args.root
    if args.kernelver:
        args.output = "-".join([args.output, args.kernelver])
    with tempfile.TemporaryDirectory(suffix=".ubuntu-core-initramfs") as d:
        kernel_root = os.path.join(d, "kernel")
        modules = os.path.join(kernel_root, "usr", "lib", "modules")
        os.makedirs(modules, exist_ok=True)
        modules = os.path.join(modules, args.kernelver)
        check_call(["cp", "-ar", args.kerneldir, modules])

        firmware = os.path.join(kernel_root, "usr", "lib", "firmware")
        check_call(["cp", "-ar", args.firmwaredir, firmware])

        db = ModuleDb(modules)
        main = os.path.join(d, "main")
        os.makedirs(main, exist_ok=True)
        # copy busybox first so we get already the shell interpreter we
        # want (busybox) instead of dracut-install pulling the systemd
        # default (dash) when it pulls a shell script later.
        install_busybox(main)
        # Copy systemd bits
        install_systemd_files(main)
        # Other miscelanea stuff
        install_misc(main)
        # Copy snapd bits
        snapd_lib = path_join_make_rel_paths(rootfs, "/usr/lib/snapd")
        snapd_files = [os.path.join(snapd_lib, "snap-bootstrap"),
                       os.path.join(snapd_lib, "info"),
                       "/lib/systemd/system/snapd.recovery-chooser-trigger.service"]
        install_files(snapd_files, main)
        # Copy features
        for feature in args.features:
            # Add feature files
            feature_path = os.path.join(args.skeleton, feature)
            if os.path.isdir(feature_path):
                check_call(["cp", "-aT", feature_path, main])
            # Add feature kernel modules
            extra_modules = os.path.join(args.skeleton, "modules", feature,
                                         "extra-modules.conf")
            if os.path.exists(extra_modules):
                add_modules_from_file(main, kernel_root, modules, firmware, extra_modules, db)

        # TODO xnox: fips actually needs additional runtime dependencies than
        # this, and currently forked in fips PPA. we need to figure out how to
        # make ubuntu-core-initramfs-fips a reality.
        if "fips" in args.features:
            install_files([
                    "/usr/bin/kcapi-hasher",
                    "/usr/bin/.kcapi-hasher.hmac",
            ] + glob.glob("/usr/lib/*/.libkcapi.so.*.hmac"), main)

        # Update epoch
        pathlib.Path("%s/main/usr/lib/clock-epoch" % d).touch()
        # Should iterate all the .conf drop ins
        for module_load in glob.iglob("%s/usr/lib/modules-load.d/*.conf" % main):
            add_modules_from_file(main, kernel_root, modules, firmware, module_load, db,
                                  warn_discoverable=True)

        for modulesf in ["modules.order", "modules.builtin", "modules.builtin.bin", "modules.builtin.modinfo"]:
            check_call(
                [
                    "/usr/lib/dracut/dracut-install",
                    "-D",
                    main,
                    "-r", kernel_root,
                    os.path.join(modules, modulesf),
                    os.path.join("usr/lib/modules", args.kernelver, modulesf),
                ]
            )
        check_call(["depmod", "-a", "-b", main, args.kernelver])
        with open(args.output, "wb") as output:
            for early in glob.iglob("%s/early/*.cpio" % args.skeleton):
                with open(early, "rb") as f:
                    shutil.copyfileobj(f, output)
            output.write(
                run(
                    "find . | cpio --create --quiet --format='newc' --owner=0:0 | zstd -1 -T0",
                    cwd=main,
                    capture_output=True,
                    shell=True,
                    check=True,
                ).stdout)


def create_efi(parser, args):
    if not args.stub:
        parser.error("--stub is required, and one was not automatically detected")
    if args.root:
        args.stub = path_join_make_rel_paths(args.root, args.stub)
        args.kernel = path_join_make_rel_paths(args.root, args.kernel)
        args.initrd = path_join_make_rel_paths(args.root, args.initrd)
        args.key = path_join_make_rel_paths(args.root, args.key)
        args.cert = path_join_make_rel_paths(args.root, args.cert)
        args.output = path_join_make_rel_paths(args.root, args.output)
    if args.kernelver:
        args.kernel = "-".join([args.kernel, args.kernelver])
        args.initrd = "-".join([args.initrd, args.kernelver])
        args.output = "-".join([args.output, args.kernelver])

        if platform.machine() == "aarch64":
            import gzip
            raw_kernel = tempfile.NamedTemporaryFile(mode='wb')
            try:
                with gzip.open(args.kernel, 'rb') as comp_kernel:
                    shutil.copyfileobj(comp_kernel, raw_kernel)
                raw_kernel.flush()
                args.kernel = raw_kernel.name
            except gzip.BadGzipFile:
                pass

    # kernel.efi sections will be aligned to the page size by llvm-objcopy
    # (which is the default value for SectionAlignment in the PE header).
    # --set-section-flags are such so added COFF sections have flags:
    # CONTENTS, ALLOC, LOAD, READONLY, DATA
    # (see llvm-objcopy man page for details)
    # To see more details, run 'objdump --all-headers kernel.efi'
    # (objdump gives a bit more of information than llvm-objdump in this case)
    objcopy_cmd = [
            "llvm-objcopy",
        ]
    # TODO add .osrel
    if args.cmdline:
        cmdline = tempfile.NamedTemporaryFile(mode='w')
        cmdline.write('%s' % args.cmdline)
        cmdline.flush()
        objcopy_cmd += [
            "--add-section", ".cmdline=%s" % cmdline.name,
            "--set-section-flags", ".cmdline=readonly,data",
            ]
    # TODO add .splash
    objcopy_cmd += [
            "--add-section", ".linux=%s" % args.kernel,
            "--set-section-flags", ".linux=readonly,data",
            "--add-section", ".initrd=%s" % args.initrd,
            "--set-section-flags", ".initrd=readonly,data",
            args.stub,
            args.output,
        ]
    check_call(objcopy_cmd)
    if not args.unsigned:
        check_call(
            [
                "sbsign",
                "--key",
                args.key,
                "--cert",
                args.cert,
                "--output",
                args.output,
                args.output,
            ]
        )
    os.chmod(args.output, 0o644)


def main():
    kernelver = check_output(
        ["uname", "-r"], universal_newlines=True
    ).strip()
    suffix = {"x86_64": "x64",
              "aarch64": "aa64",
              "arm": "arm",
              "riscv64": "riscv64"}.get(platform.machine())
    features = {"x86_64": "main server"}.get(platform.machine(), "main")
    parser = argparse.ArgumentParser()
    subparser = parser.add_subparsers(dest="subcmd", required=True)
    efi_parser = subparser.add_parser(
        "create-efi", formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    efi_parser.add_argument("--root", help="path to root")
    efi_parser.add_argument("--stub", help="path to stub")
    if suffix:
        efi_parser.set_defaults(
            stub="/usr/lib/systemd/boot/efi/linux%s.efi.stub" % suffix
        )
    efi_parser.add_argument("--kernel", help="path to kernel", default="/boot/vmlinuz")
    efi_parser.add_argument(
        "--kernelver", help="kernel version suffix", default=kernelver
    )
    efi_parser.add_argument(
        "--initrd", help="path to initramfs", default="/boot/ubuntu-core-initramfs.img"
    )
    efi_parser.add_argument(
        "--cmdline", help="commandline to embed (can be overriden with LoadOptions)"
    )
    efi_parser.add_argument(
        "--unsigned", help="do not sign efi app", default=False, action="store_true"
    )
    efi_parser.add_argument(
        "--key",
        help="signing key",
        default="/usr/lib/ubuntu-core-initramfs/snakeoil/PkKek-1-snakeoil.key",
    )
    efi_parser.add_argument(
        "--cert",
        help="certificate",
        default="/usr/lib/ubuntu-core-initramfs/snakeoil/PkKek-1-snakeoil.pem",
    )
    efi_parser.add_argument(
        "--output", help="path to output", default="/boot/kernel.efi"
    )
    initrd_parser = subparser.add_parser(
        "create-initrd", formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    initrd_parser.add_argument("--root", help="path to root", default="")
    initrd_parser.add_argument(
        "--skeleton", help="path to skeleton", default="/usr/lib/ubuntu-core-initramfs"
    )
    initrd_parser.add_argument(
        "--feature",
        dest="features",
        help="list of features to enable, if unspecified defaults to %s" % features,
        nargs="+"
    )
    initrd_parser.add_argument(
        "--kerneldir", help="path to kernel modules dir default /lib/modules/KERNELVER"
    )
    initrd_parser.add_argument("--kernelver", help="kernel version", default=kernelver)
    initrd_parser.add_argument(
        "--firmwaredir", help="path to kernel firmware", default="/lib/firmware"
    )
    initrd_parser.add_argument(
        "--output", help="path to output", default="/boot/ubuntu-core-initramfs.img"
    )
    initrd_parser.set_defaults(
        kernelver=check_output(
            ["uname", "-r"], universal_newlines=True
        ).strip()
    )

    args = parser.parse_args()
    if args.subcmd == "create-initrd" and not args.features:
        # Set arch specific default set of features
        args.features = features.split()
        # For generic kernels, enable more server drivers too
        if args.kernelver.endswith("-generic") and "server" not in args.features:
            args.features.append("server")
        if args.kernelver.endswith("-fips"):
            args.features.append("fips")
    globals()[args.subcmd.replace("-", "_")](parser, args)


if __name__ == "__main__":
    main()
