#!/usr/bin/make -f
export DH_VERBOSE=1

include /usr/share/dpkg/default.mk

%:
	dh $@ --buildsystem=meson+ninja --sourcedirectory=vendor/systemd --with python3

SYSTEMD_EXTRA_PATCHES=								       \
	ubuntu-core-initramfs-clock-util-read-timestamp-from-usr-lib-clock-epoch.patch \
	ubuntu-core-initramfs-fix-default.target

override_dh_auto_configure:
	cd vendor/systemd; for patch in $(SYSTEMD_EXTRA_PATCHES); do QUILT_PATCHES=debian/patches quilt import "../systemd-patches/$${patch}"; done || true
	cd vendor/systemd; QUILT_PATCHES=debian/patches quilt push -a || true
	sed -i '/"minix"/s/^/\/\//' vendor/systemd/src/test/test-path-util.c
	dh_auto_configure --buildsystem=meson+ninja --sourcedirectory=vendor/systemd -- \
      -Db_lto=true \
      -Db_pie=true \
      -Ddebug=false \
      -Dstrip=true \
      -Dsplit-usr=false \
      -Dsplit-bin=true \
      -Dntp-servers=ntp.ubuntu.com \
      -Ddns-servers='' \
      --libdir=/usr/lib/$(DEB_HOST_MULTIARCH) \
      -Drootlibdir=/usr/lib/$(DEB_HOST_MULTIARCH) \
      -Dsysvinit-path='' \
      -Dsysvrcnd-path='' \
      -Dsulogin-path='/usr/bin/sh' \
      -Drpmmacrosdir=no \
      -Dlink-udev-shared=true \
      -Dlink-systemctl-shared=true \
      -Dstatic-libsystemd=false \
      -Dstatic-libudev=false \
      -Ddebug-shell='/usr/bin/sh' \
      -Dvalgrind=false \
      -Dutmp=false \
      -Dhibernate=false \
      -Dldconfig=false \
      -Dresolve=false \
      -Defi=true \
      -Dtpm=true \
      -Dtpm-pcrindex=12 \
      -Denvironment-d=false \
      -Dbinfmt=false \
      -Dcoredump=false \
      -Dlogind=false \
      -Dhostnamed=false \
      -Dlocaled=false \
      -Dmachined=false \
      -Dportabled=false \
      -Dnetworkd=false \
      -Dtimedated=false \
      -Dtimesyncd=false \
      -Dremote=false \
      -Dnss-myhostname=false \
      -Dnss-mymachines=false \
      -Dnss-resolve=false \
      -Dnss-systemd=true \
      -Dfirstboot=false \
      -Drandomseed=false \
      -Dbacklight=false \
      -Dvconsole=false \
      -Dquotacheck=false \
      -Dsysusers=true \
      -Dtmpfiles=true \
      -Dimportd=false \
      -Dhwdb=true \
      -Drfkill=false \
      -Dman=false \
      -Dhtml=false \
      -Dfallback-hostname=ubuntu \
      -Dsystem-uid-max=999 \
      -Dsystem-gid-max=999 \
      -Dadm-group=true \
      -Dwheel-group=false \
      -Ddev-kvm-mode=0660 \
      -Dgroup-render-mode=0660 \
      -Ddefault-dnssec=no \
      -Dselinux=true \
      -Ddefault-kill-user-processes=false \
      -Ddefault-hierarchy=hybrid \
      -Ddefault-locale=C.UTF-8 \
      -Dnobody-user=nobody \
      -Dnobody-group=nogroup \
      -Dbump-proc-sys-fs-nr-open=false \
      -Dsupport-url=https://www.ubuntu.com/support \
      -Dseccomp=true \
      -Dapparmor=true \
      -Dsmack=false \
      -Dpolkit=false \
      -Dima=false \
      -Dacl=true \
      -Daudit=true \
      -Dblkid=true \
      -Dkmod=true \
      -Dpam=true \
      -Dpamconfdir=no \
      -Dmicrohttpd=false \
      -Dlibcryptsetup=true \
      -Dlibcurl=false \
      -Dlibidn2=true \
      -Dlibiptc=true \
      -Dqrencode=false \
      -Dgcrypt=false \
      -Dgnutls=false \
      -Dopenssl=false \
      -Delfutils=false \
      -Dzlib=false \
      -Dbzip2=false \
      -Dxz=false \
      -Dlz4=true \
      -Dxkbcommon=false \
      -Dpcre2=true \
      -Dglib=false \
      -Ddbus=false \
      -Dgnu-efi=true \
      -Duserdb=false \
      -Dbashcompletiondir=no \
      -Dzshcompletiondir=no \
      -Dinstall-tests=false

override_dh_auto_test:
	LD_LIBRARY_PATH= LD_PRELOAD= dh_auto_test --buildsystem=meson+ninja --sourcedirectory=vendor/systemd || :

override_dh_auto_clean:
	dh_auto_clean --buildsystem=meson+ninja --sourcedirectory=vendor/systemd
	sed -i '/"minix"/s/^\/*//' vendor/systemd/src/test/test-path-util.c
	cd vendor/systemd; QUILT_PATCHES=debian/patches quilt pop -a || true
	cd vendor/systemd; for patch in $(SYSTEMD_EXTRA_PATCHES); do QUILT_PATCHES=debian/patches quilt delete -r "$${patch}"; done || true
	rm -rf vendor/systemd/.pc

override_dh_auto_install:
	rm -rf debian/tmp
	mkdir debian/tmp
	cp -ar factory/* debian/tmp
	mkdir -p debian/tmp/usr/bin
	mkdir -p debian/tmp/usr/lib64
	dh_auto_install --destdir=debian/tmp --buildsystem=meson+ninja --sourcedirectory=vendor/systemd
	clean_paths="etc/kernel \
		etc/sysctl.d \
		etc/modules-load.d \
		etc/tmpfiles.d \
		etc/systemd/user \
		etc/systemd/journald.conf \
		etc/systemd/user.conf \
		etc/systemd/system/getty.target.wants \
		etc/systemd/system.conf \
		etc/systemd/sleep.conf \
		etc/systemd/pstore.conf \
		etc/udev \
		etc/xdg \
		etc/X11 \
		usr/share/locale \
		usr/share/factory \
		usr/share/pkgconfig \
		usr/share/polkit-1 \
		usr/share/doc \
		usr/bin/systemd-analyze \
		usr/lib/kernel \
		usr/lib/systemd/user \
		usr/lib/systemd/system-preset \
		usr/lib/systemd/catalog \
		usr/lib/systemd/user-preset \
		usr/lib/systemd/network \
		usr/lib/systemd/system-generators/systemd-gpt-auto-generator \
		usr/lib/sysusers.d \
		usr/lib/*/pkgconfig \
		usr/include \
		usr/bin/busctl \
		usr/bin/systemd-cgtop \
		usr/bin/systemd-cgls \
		usr/bin/systemd-escape \
		usr/bin/kernel-install \
		usr/bin/systemd-nspawn \
		"; \
	for p in $$clean_paths; do \
		rm -rf debian/tmp/$$p ;\
	done
	touch debian/tmp/etc/machine-id

	LD_LIBRARY_PATH=`pwd`/debian/tmp/usr/lib/*/:`pwd`/debian/tmp/usr/lib/systemd `pwd`/debian/tmp/usr/bin/systemd-hwdb --root debian/tmp update --usr --strict
	rm -rf debian/tmp/usr/lib/udev/hwdb.d

	/usr/lib/dracut/dracut-install -D $(CURDIR)/debian/tmp --ldd /usr/lib/initramfs-tools/bin/busybox usr/bin/busybox
	set -e; \
	for alias in `debian/tmp/usr/bin/busybox --list-long | grep -v -e busybox -e reboot -e mount -e umount`; do \
		ln -v -s busybox debian/tmp/usr/bin/$$alias; \
	done

	set -e; \
	for f in "/lib/$(DEB_HOST_MULTIARCH)/libnss_files.so.* /lib/$(DEB_HOST_MULTIARCH)/libnss_compat.so.* /lib/$(DEB_HOST_MULTIARCH)/libgcc_s.so.1 /sbin/e2fsck /sbin/fsck.vfat /sbin/fsck /bin/umount /bin/mount /bin/kmod /usr/bin/unsquashfs /sbin/dmsetup /usr/lib/snapd/snap-bootstrap /usr/lib/snapd/info /lib/systemd/systemd-bootchart /lib/systemd/system/snapd.recovery-chooser-trigger.service"; do \
		/usr/lib/dracut/dracut-install -D $(CURDIR)/debian/tmp --ldd $$f; \
	done
	dpkg -L dmsetup | grep rules.d | xargs -L1 /usr/lib/dracut/dracut-install -D $(CURDIR)/debian/tmp --ldd
ifeq ($(DEB_HOST_ARCH),amd64)
	-cp $(CURDIR)/factory/usr/lib/snapd/snap-bootstrap $(CURDIR)/debian/tmp/usr/lib/snapd/snap-bootstrap
else
	-rm $(CURDIR)/factory/usr/lib/snapd/snap-bootstrap
endif
	ln -v -s e2fsck debian/tmp/usr/sbin/fsck.ext4

	set -e; \
	for e in $$(find debian/tmp -type f -executable); do \
		/usr/lib/dracut/dracut-install -D $(CURDIR)/debian/tmp --resolvelazy $$e ; \
	done
	ldconfig -r debian/tmp

override_dh_install:
	dh_install
ifneq ($(CI),true)
ifeq ($(DEB_HOST_ARCH_BITS),64)
	# This builds a forked snap-bootstrap ito the "cloudimg-rootfs" feature
	# directory. This is *not* used unless "--feature main cloudimg-rootfs"
	# is specified . This is only done for the certain cloud kernels during
	# the "core-initrd create-initrd" time.
	#
	# Forked snap-bootstrap until https://github.com/snapcore/snapd/pull/10267 lands
	GOPATH=$(CURDIR)/vendor/gopath/ HOME=$(CURDIR)/debian CGO_ENABLED=1 go build -buildmode=pie -tags nomanagers -o $(CURDIR)/debian/$(DEB_SOURCE)/usr/lib/$(DEB_SOURCE)/cloudimg-rootfs/usr/lib/snapd/snap-bootstrap github.com/snapcore/snapd/cmd/snap-bootstrap
	# For some reason tests fail when building in chroot
	GOPATH=$(CURDIR)/vendor/gopath/ HOME=$(CURDIR)/debian CGO_ENABLED=1 go test -buildmode=pie -tags nomanagers github.com/snapcore/snapd/cmd/snap-bootstrap || :
endif
endif
	rm -rf debian/ubuntu-core-initramfs/usr/lib/ubuntu-core-initramfs/main/usr/lib/systemd/boot
ifeq ($(DEB_HOST_ARCH),amd64)
	mkdir -p debian/ubuntu-core-initramfs/usr/lib/ubuntu-core-initramfs/early/
	debian/generate-x86-microcode debian/ubuntu-core-initramfs/usr/lib/ubuntu-core-initramfs/early/microcode.cpio
endif

override_dh_clean:
ifneq ($(CI),true)
	# only needed for the "--feature main cloudimg-rootfs", not used for the
	# default initrd
	[ -d vendor/gopath ] || ( mkdir -p vendor/gopath/src/github.com/snapcore/; cd vendor/gopath/src/github.com/snapcore; git clone -b run-cloudimg-rootfs-draft-1 https://github.com/xnox/snapd.git; cd snapd; git checkout ec1bfe7; GOPATH= ./get-deps.sh )
endif
	dh_clean

override_dh_python3:
	dh_python3 --no-ext-rename

override_dh_fixperms:
	dh_fixperms -Xusr/lib/ubuntu-core-initramfs/main
override_dh_makeshlibs:
	dh_makeshlibs -Xusr/lib/ubuntu-core-initramfs/main
override_dh_shlibdeps:
	dh_shlibdeps -Xusr/lib/ubuntu-core-initramfs/main
override_dh_strip:
	dh_strip -Xsnap-bootstrap
